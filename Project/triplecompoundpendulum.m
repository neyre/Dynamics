% Triple Compound Pendulum Simulation
%
% Simulates the motion of a triple compound pendulum given a set of initial conditions.
% Plots either the path, the state variables or the energy over time.
% Can also animate the path and save as a movie file.
%
% Function Inputs: None
% Function Outputs: None
%
% Initial conditions and parameters are specified in the function for easy running.
%
% Nick Eyre & Jeff Holzgrafe - December 2012
% Olin College ENGR 2340 - Dynamics
% Final Project

function pendulum
  clf

  % Parameters
  m1 = 0.2944;  %Mass (kg)
  m2 = 0.1756;  %Mass (kg)
  m3 = 0.0947;  %Mass (kg)
  l1 = 0.508;   %Length (m)
  l2 = 0.254;   %Length (m)
  l3 = 0.127;   %Length (m)
  g = -9.81;    %Gravity (m/s^2)
  g2 = g;
  k1 = 0.0050;  % Damping Coefficient 1
  k2 = 0;       % Damping Coefficient 2
  k3 = 0.00080; % Damping Coefficient 3
  
  % Moments of Inertia About CoG of Each Link
  I1 = 9.526e-3;
  I2 = 1.625e-3;
  I3 = 1.848e-4;
  
  % Initial Conditions
  theta1 = pi-.01;
  theta2 = theta1;
  theta3 = theta1;
  omega1 = 0;
  omega2 = 0;
  omega3 = 0;

  % Simulation Parameters
  t = 40;
  dt = 1/120;
  tolerance = 1e-14;  %Relative Integration Tolerance
  animate = true;
  plotpath = false;
  showenergy = false;
  showstates = false;

  % Setup & Run Simulation
  X0 = [pi pi/2 0 omega1 omega2 omega3]; %Initial Condition Vector
  T = [0:dt:t]; %Time Vector
  options = odeset('RelTol', tolerance);  %Setup Events
  [T, Z] = ode45(@equations, T, X0,options);  %Run Solver
  visualize(T,Z);

  % Equations of Motion
  function res = equations(T,X)
    %Unpack State Variables (Theta & Theta Dot)
    o1 = X(1);
    o2 = X(2);
    o3 = X(3);
    o1d = X(4);
    o2d = X(5);
    o3d = X(6);

    %Calculate Accelerations (Theta Double Dot)
    o1dd=(-2).*(64.*I1.*I2.*I3+16.*I2.*I3.*l1.^2.*m1+64.*I2.*I3.*l1.^2.*m2+ ...
      16.*I1.*I3.*l2.^2.*m2+4.*I3.*l1.^2.*l2.^2.*m1.*m2+8.*I3.*l1.^2.* ...
      l2.^2.*m2.^2+64.*I2.*I3.*l1.^2.*m3+64.*I1.*I3.*l2.^2.*m3+16.*I1.* ...
      I2.*l3.^2.*m3+16.*I3.*l1.^2.*l2.^2.*m1.*m3+4.*I2.*l1.^2.*l3.^2.* ...
      m1.*m3+48.*I3.*l1.^2.*l2.^2.*m2.*m3+16.*I2.*l1.^2.*l3.^2.*m2.*m3+ ...
      4.*I1.*l2.^2.*l3.^2.*m2.*m3+l1.^2.*l2.^2.*l3.^2.*m1.*m2.*m3+2.* ...
      l1.^2.*l2.^2.*l3.^2.*m2.^2.*m3+32.*I3.*l1.^2.*l2.^2.*m3.^2+8.*I2.* ...
      l1.^2.*l3.^2.*m3.^2+8.*I1.*l2.^2.*l3.^2.*m3.^2+2.*l1.^2.*l2.^2.* ...
      l3.^2.*m1.*m3.^2+6.*l1.^2.*l2.^2.*l3.^2.*m2.*m3.^2+(-2).*l1.^2.* ...
      l2.^2.*(m2+2.*m3).*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3)).*cos(2.*(o1 ...
      +(-1).*o2))+(-2).*l1.^2.*l3.^2.*(4.*I2+(-1).*l2.^2.*m2).* ...
      m3.^2.*cos(2.*(o1+(-1).*o3))+(-8).*I1.*l2.^2.*l3.^2.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))+(-2).*l1.^2.*l2.^2.*l3.^2.*m1.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))+(-4).*l1.^2.*l2.^2.*l3.^2.*m2.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))).^(-1).*(2.*k1.*(4.*I2.*(4.*I3+l3.^2.* ...
      m3)+l2.^2.*(l3.^2.*m3.*(m2+2.*m3)+4.*I3.*(m2+4.*m3))+(-2).*l2.^2.* ...
      l3.^2.*m3.^2.*cos(2.*(o2+(-1).*o3))).*o1d+ ...
      l1.^2.*(l2.^2.*(m2+2.*m3).*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3)).*sin( ...
      2.*(o1+(-1).*o2))+l3.^2.*(4.*I2+(-1).*l2.^2.*m2).*m3.^2.* ...
      sin(2.*(o1+(-1).*o3))).*o1d.^2+l1.*((-1).* ...
      g.*((l2.^2.*(l3.^2.*m3.*(m1.*m2+m2.^2+2.*m1.*m3+3.*m2.*m3)+4.*I3.* ...
      (m1.*m2+m2.^2+4.*m1.*m3+6.*m2.*m3+4.*m3.^2))+4.*I2.*(l3.^2.*m3.*( ...
      m1+2.*m2+m3)+4.*I3.*(m1+2.*(m2+m3)))).*sin(o1)+l2.^2.*(m2+2.* ...
      m3).*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3)).*sin(o1+(-2).*o2)+( ...
      -1).*l3.^2.*m3.^2.*(2.*l2.^2.*(m1+m2).*cos(2.*(o2+(-1).*o3)) ...
      .*sin(o1)+((-4).*I2+l2.^2.*m2).*sin(o1+(-2).*o3)))+(-4).* ...
      k2.*l2.*((l3.^2.*m3.*(m2+m3)+4.*I3.*(m2+2.*m3)).*cos(o1+(-1).* ...
      o2)+(-1).*l3.^2.*m3.^2.*cos(o1+o2+(-2).*o3)).* ...
      o2d+l2.*((4.*I2.*(l3.^2.*m3.*(m2+m3)+4.*I3.*(m2+ ...
      2.*m3))+l2.^2.*(l3.^2.*m2.*m3.*(m2+3.*m3)+4.*I3.*(m2.^2+6.*m2.*m3+ ...
      8.*m3.^2))).*sin(o1+(-1).*o2)+l3.^2.*(4.*I2+(-1).*l2.^2.*m2) ...
      .*m3.^2.*sin(o1+o2+(-2).*o3)).*o2d.^2+ ...
      4.*k3.*l3.*m3.*((-2).*(2.*I2+l2.^2.*m3).*cos(o1+(-1).*o3)+ ...
      l2.^2.*(m2+2.*m3).*cos(o1+(-2).*o2+o3)).* ...
      o3d+l3.*m3.*(4.*(4.*I2.*I3+2.*I3.*l2.^2.*m3+I2.*l3.^2.*m3).* ...
      sin(o1+(-1).*o3)+l2.^2.*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3)).* ...
      sin(o1+(-2).*o2+o3)).*o3d.^2));
    o2dd=2.*(64.*I1.*I2.*I3+16.*I2.*I3.*l1.^2.*m1+64.*I2.*I3.*l1.^2.*m2+ ...
      16.*I1.*I3.*l2.^2.*m2+4.*I3.*l1.^2.*l2.^2.*m1.*m2+8.*I3.*l1.^2.* ...
      l2.^2.*m2.^2+64.*I2.*I3.*l1.^2.*m3+64.*I1.*I3.*l2.^2.*m3+16.*I1.* ...
      I2.*l3.^2.*m3+16.*I3.*l1.^2.*l2.^2.*m1.*m3+4.*I2.*l1.^2.*l3.^2.* ...
      m1.*m3+48.*I3.*l1.^2.*l2.^2.*m2.*m3+16.*I2.*l1.^2.*l3.^2.*m2.*m3+ ...
      4.*I1.*l2.^2.*l3.^2.*m2.*m3+l1.^2.*l2.^2.*l3.^2.*m1.*m2.*m3+2.* ...
      l1.^2.*l2.^2.*l3.^2.*m2.^2.*m3+32.*I3.*l1.^2.*l2.^2.*m3.^2+8.*I2.* ...
      l1.^2.*l3.^2.*m3.^2+8.*I1.*l2.^2.*l3.^2.*m3.^2+2.*l1.^2.*l2.^2.* ...
      l3.^2.*m1.*m3.^2+6.*l1.^2.*l2.^2.*l3.^2.*m2.*m3.^2+(-2).*l1.^2.* ...
      l2.^2.*(m2+2.*m3).*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3)).*cos(2.*(o1 ...
      +(-1).*o2))+(-2).*l1.^2.*l3.^2.*(4.*I2+(-1).*l2.^2.*m2).* ...
      m3.^2.*cos(2.*(o1+(-1).*o3))+(-8).*I1.*l2.^2.*l3.^2.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))+(-2).*l1.^2.*l2.^2.*l3.^2.*m1.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))+(-4).*l1.^2.*l2.^2.*l3.^2.*m2.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))).^(-1).*(4.*k1.*l1.*l2.*((l3.^2.*m3.*( ...
      m2+m3)+4.*I3.*(m2+2.*m3)).*cos(o1+(-1).*o2)+(-1).*l3.^2.* ...
      m3.^2.*cos(o1+o2+(-2).*o3)).*o1d+l1.* ...
      l2.*((4.*I1.*(l3.^2.*m3.*(m2+m3)+4.*I3.*(m2+2.*m3))+l1.^2.*(4.* ...
      I3.*(m2+2.*m3).*(m1+4.*(m2+m3))+l3.^2.*m3.*(m1.*(m2+m3)+2.*m2.*( ...
      2.*m2+3.*m3)))).*sin(o1+(-1).*o2)+(-1).*l3.^2.*(4.*I1+ ...
      l1.^2.*(m1+2.*m2)).*m3.^2.*sin(o1+o2+(-2).*o3)).* ...
      o1d.^2+(-2).*k2.*(4.*I1.*(4.*I3+l3.^2.*m3)+ ...
      l1.^2.*(l3.^2.*m3.*(m1+4.*m2+2.*m3)+4.*I3.*(m1+4.*(m2+m3)))+(-2).* ...
      l1.^2.*l3.^2.*m3.^2.*cos(2.*(o1+(-1).*o3))).* ...
      o2d+l2.^2.*(l1.^2.*(m2+2.*m3).*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3) ...
      ).*sin(2.*(o1+(-1).*o2))+(-1).*l3.^2.*(4.*I1+l1.^2.*(m1+2.* ...
      m2)).*m3.^2.*sin(2.*(o2+(-1).*o3))).*o2d ...
      .^2+l2.*(g.*((-1).*l1.^2.*(4.*I3.*(m2+2.*m3).*(m1+2.*(m2+m3))+ ...
      l3.^2.*m3.*(m1.*(m2+m3)+m2.*(2.*m2+3.*m3))).*sin(2.*o1+(-1).* ...
      o2)+(4.*I1.*(l3.^2.*m3.*(m2+m3)+4.*I3.*(m2+2.*m3))+l1.^2.*( ...
      l3.^2.*m2.*m3.*(2.*m2+3.*m3)+8.*I3.*(m2.^2+3.*m2.*m3+2.*m3.^2))).* ...
      sin(o2)+l3.^2.*m3.^2.*((4.*I1+l1.^2.*m2).*sin(o2+(-2).*o3 ...
      )+l1.^2.*(m1+m2).*sin(2.*o1+o2+(-2).*o3)))+(-4).*k3.*l3.* ...
      m3.*(l1.^2.*(m2+2.*m3).*cos(2.*o1+(-1).*o2+(-1).*o3)+(-1) ...
      .*(4.*I1+l1.^2.*(m1+3.*m2+2.*m3)).*cos(o2+(-1).*o3)).* ...
      o3d+(-1).*l3.*m3.*((-1).*l1.^2.*(l3.^2.*m2.*m3+ ...
      4.*I3.*(m2+2.*m3)).*sin(2.*o1+(-1).*o2+(-1).*o3)+(4.*I1.* ...
      (4.*I3+l3.^2.*m3)+l1.^2.*(l3.^2.*(m1+3.*m2).*m3+4.*I3.*(m1+3.*m2+ ...
      2.*m3))).*sin(o2+(-1).*o3)).*o3d.^2));
    o3dd=2.*(64.*I1.*I2.*I3+16.*I2.*I3.*l1.^2.*m1+64.*I2.*I3.*l1.^2.*m2+ ...
      16.*I1.*I3.*l2.^2.*m2+4.*I3.*l1.^2.*l2.^2.*m1.*m2+8.*I3.*l1.^2.* ...
      l2.^2.*m2.^2+64.*I2.*I3.*l1.^2.*m3+64.*I1.*I3.*l2.^2.*m3+16.*I1.* ...
      I2.*l3.^2.*m3+16.*I3.*l1.^2.*l2.^2.*m1.*m3+4.*I2.*l1.^2.*l3.^2.* ...
      m1.*m3+48.*I3.*l1.^2.*l2.^2.*m2.*m3+16.*I2.*l1.^2.*l3.^2.*m2.*m3+ ...
      4.*I1.*l2.^2.*l3.^2.*m2.*m3+l1.^2.*l2.^2.*l3.^2.*m1.*m2.*m3+2.* ...
      l1.^2.*l2.^2.*l3.^2.*m2.^2.*m3+32.*I3.*l1.^2.*l2.^2.*m3.^2+8.*I2.* ...
      l1.^2.*l3.^2.*m3.^2+8.*I1.*l2.^2.*l3.^2.*m3.^2+2.*l1.^2.*l2.^2.* ...
      l3.^2.*m1.*m3.^2+6.*l1.^2.*l2.^2.*l3.^2.*m2.*m3.^2+(-2).*l1.^2.* ...
      l2.^2.*(m2+2.*m3).*(l3.^2.*m2.*m3+4.*I3.*(m2+2.*m3)).*cos(2.*(o1 ...
      +(-1).*o2))+(-2).*l1.^2.*l3.^2.*(4.*I2+(-1).*l2.^2.*m2).* ...
      m3.^2.*cos(2.*(o1+(-1).*o3))+(-8).*I1.*l2.^2.*l3.^2.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))+(-2).*l1.^2.*l2.^2.*l3.^2.*m1.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))+(-4).*l1.^2.*l2.^2.*l3.^2.*m2.*m3.^2.* ...
      cos(2.*(o2+(-1).*o3))).^(-1).*((-4).*g.*I2.*l1.^2.*l3.*m1.* ...
      m3.*sin(2.*o1+(-1).*o3)+(-8).*g.*I2.*l1.^2.*l3.*m2.*m3.*sin( ...
      2.*o1+(-1).*o3)+g.*l1.^2.*l2.^2.*l3.*m2.^2.*m3.*sin(2.*o1 ...
      +(-1).*o3)+(-8).*g.*I2.*l1.^2.*l3.*m3.^2.*sin(2.*o1+(-1).* ...
      o3)+(-2).*g.*l1.^2.*l2.^2.*l3.*m1.*m3.^2.*sin(2.*o1+(-1).* ...
      o3)+(-4).*g.*I1.*l2.^2.*l3.*m2.*m3.*sin(2.*o2+(-1).*o3)+( ...
      -1).*g.*l1.^2.*l2.^2.*l3.*m2.^2.*m3.*sin(2.*o2+(-1).*o3)+( ...
      -8).*g.*I1.*l2.^2.*l3.*m3.^2.*sin(2.*o2+(-1).*o3)+(-2).*g.* ...
      l1.^2.*l2.^2.*l3.*m2.*m3.^2.*sin(2.*o2+(-1).*o3)+16.*g.*I1.* ...
      I2.*l3.*m3.*sin(o3)+8.*g.*I2.*l1.^2.*l3.*m2.*m3.*sin(o3)+( ...
      -1).*g.*l1.^2.*l2.^2.*l3.*m2.^2.*m3.*sin(o3)+8.*g.*I2.*l1.^2.* ...
      l3.*m3.^2.*sin(o3)+8.*g.*I1.*l2.^2.*l3.*m3.^2.*sin(o3)+g.* ...
      l1.^2.*l2.^2.*l3.*m1.*m2.*m3.*sin(2.*o1+(-2).*o2+o3)+g.* ...
      l1.^2.*l2.^2.*l3.*m2.^2.*m3.*sin(2.*o1+(-2).*o2+o3)+2.* ...
      g.*l1.^2.*l2.^2.*l3.*m1.*m3.^2.*sin(2.*o1+(-2).*o2+o3)+ ...
      2.*g.*l1.^2.*l2.^2.*l3.*m2.*m3.^2.*sin(2.*o1+(-2).*o2+o3) ...
      +(-4).*k1.*l1.*l3.*m3.*((-2).*(2.*I2+l2.^2.*m3).*cos(o1+(-1).* ...
      o3)+l2.^2.*(m2+2.*m3).*cos(o1+(-2).*o2+o3)).* ...
      o1d+(-1).*l1.*l3.*m3.*((-2).*(4.*I1.*(2.*I2+ ...
      l2.^2.*m3)+l1.^2.*(l2.^2.*((-1).*m2.^2+m1.*m3)+2.*I2.*(m1+4.*(m2+ ...
      m3)))).*sin(o1+(-1).*o3)+l2.^2.*(4.*I1+l1.^2.*(m1+2.*m2)).*( ...
      m2+2.*m3).*sin(o1+(-2).*o2+o3)).*o1d.^2+ ...
      (-4).*k2.*l2.*l3.*m3.*(l1.^2.*(m2+2.*m3).*cos(2.*o1+(-1).*o2 ...
      +(-1).*o3)+(-1).*(4.*I1+l1.^2.*(m1+3.*m2+2.*m3)).*cos(o2+( ...
      -1).*o3)).*o2d+l2.*l3.*m3.*(l1.^2.*(4.*I2+(-1) ...
      .*l2.^2.*m2).*(m2+2.*m3).*sin(2.*o1+(-1).*o2+(-1).*o3)+( ...
      4.*I1.*(4.*I2+l2.^2.*(m2+4.*m3))+l1.^2.*(4.*I2.*(m1+3.*m2+2.*m3)+ ...
      l2.^2.*(m1.*m2+m2.^2+4.*m1.*m3+6.*m2.*m3))).*sin(o2+(-1).*o3 ...
      )).*o2d.^2+(-32).*I1.*I2.*k3.*o3d ...
      +(-8).*I2.*k3.*l1.^2.*m1.*o3d+(-32).*I2.*k3.* ...
      l1.^2.*m2.*o3d+(-8).*I1.*k3.*l2.^2.*m2.* ...
      o3d+(-2).*k3.*l1.^2.*l2.^2.*m1.*m2.* ...
      (o3d)+(-4).*k3.*l1.^2.*l2.^2.*m2.^2.*o3d+(-32) ...
      .*I2.*k3.*l1.^2.*m3.*o3d+(-32).*I1.*k3.*l2.^2.* ...
      m3.*o3d+(-8).*k3.*l1.^2.*l2.^2.*m1.*m3.* ...
      o3d+(-24).*k3.*l1.^2.*l2.^2.*m2.*m3.* ...
      (o3d)+(-16).*k3.*l1.^2.*l2.^2.*m3.^2.*o3d+4.* ...
      k3.*l1.^2.*l2.^2.*m2.^2.*cos(2.*(o1+(-1).*o2)).* ...
      (o3d)+16.*k3.*l1.^2.*l2.^2.*m2.*m3.*cos(2.*(o1+(-1).*o2) ...
      ).*o3d+16.*k3.*l1.^2.*l2.^2.*m3.^2.*cos(2.*(o1 ...
      +(-1).*o2)).*o3d+4.*I2.*l1.^2.*l3.^2.*m3.^2.* ...
      sin(2.*(o1+(-1).*o3)).*o3d.^2+(-1).*l1.^2.* ...
      l2.^2.*l3.^2.*m2.*m3.^2.*sin(2.*(o1+(-1).*o3)).* ...
      (o3d).^2+4.*I1.*l2.^2.*l3.^2.*m3.^2.*sin(2.*(o2+(-1).*o3 ...
      )).*o3d.^2+l1.^2.*l2.^2.*l3.^2.*m1.*m3.^2.*sin( ...
      2.*(o2+(-1).*o3)).*o3d.^2+2.*l1.^2.*l2.^2.* ...
      l3.^2.*m2.*m3.^2.*sin(2.*(o2+(-1).*o3)).*o3d ...
      .^2);


    %Output Accelerations
    res = [o1d;o2d;o3d;o1dd;o2dd;o3dd];
    
  end %equations

  function visualize(T,Z)
    if animate
      runanimation(Z);
    end
    if plotpath
      plotthepath(Z);
    end
    if showenergy
      plotenergy(T,Z);
    end
    if showstates
      plotstates(T,Z);
    end
  end

  function [X1 Y1 X2 Y2 X3 Y3 X1d Y1d X2d Y2d X3d Y3d] = converttocartesian(Z)
    %Extract
    theta1 = Z(:,1);
    theta2 = Z(:,2);
    theta3 = Z(:,3);
    omega1 = Z(:,4);
    omega2 = Z(:,5);
    omega3 = Z(:,6);

    %Position
    X1 = l1 * sin(theta1);
    Y1 =-l1 * cos(theta1);
    X2 = l2 * sin(theta2) + X1;
    Y2 =-l2 * cos(theta2) + Y1;
    X3 = l3 * sin(theta3) + X2;
    Y3 =-l3 * cos(theta3) + Y2;

    %Velocity
    X1d = l1*omega1.*cos(theta1)/2;
    Y1d =-l1*omega1.*sin(theta1)/2;
    X2d = l2*omega2.*cos(theta2)/2 + X1d*2;
    Y2d =-l2*omega2.*sin(theta2)/2 + Y1d*2;
    X3d = l3*omega3.*cos(theta3)/2 + X2d*2;
    Y3d =-l3*omega3.*sin(theta3)/2 + Y2d*2;
  end

  function runanimation(Z)
    %Convert to Cartesian
    [X1 Y1 X2 Y2 X3 Y3 X1d Y1d X2d Y2d X3d Y3d] = converttocartesian(Z);

    %Configure Axes
    lmax = l1 + l2 + l3;
    ax = [-lmax lmax -lmax lmax];

    %Start Video
    v = VideoWriter('Pendulum.avi');
    open(v);

    for i=1:4:length(theta1)
      clf, hold on

      %Plot Historical Position
      plot(X1(1:i),Y1(1:i),'r')
      plot(X2(1:i),Y2(1:i),'g')
      plot(X3(1:i),Y3(1:i),'b')

      %Plot Current System Position
      plot([0 X1(i)],[0 Y1(i)],'k')
      plot([X1(i) X2(i)],[Y1(i) Y2(i)],'k')
      plot([X2(i) X3(i)],[Y2(i) Y3(i)],'k')
      plot(0,0,'k.','MarkerSize',20)
      plot(X1(i),Y1(i),'k.','MarkerSize',20)
      plot(X2(i),Y2(i),'k.','MarkerSize',20)
      plot(X3(i),Y3(i),'k.','MarkerSize',20)

      legend('Bar 1', 'Bar 2', 'Bar 3')
      axis(ax)
      axis square
      writeVideo(v,getframe);
    end %for

    %End Video
    close(v)
  end %visualize

  function plotthepath(Z)
    %Convert to Cartesian
    [X1 Y1 X2 Y2 X3 Y3 X1d Y1d X2d Y2d X3d Y3d] = converttocartesian(Z);

    %Configure Axes
    lmax = l1 + l2 + l3;
    ax = [-lmax lmax -lmax lmax];

    %Plot
    clf; hold on
    plot(X1,Y1,'r')
    plot(X2,Y2,'g')
    plot(X3,Y3,'b')
    plot([0 X1(end)],[0 Y1(end)],'k')
    plot([X1(end) X2(end)],[Y1(end) Y2(end)],'k')
    plot([X2(end) X3(end)],[Y2(end) Y3(end)],'k')
    plot(0,0,'k.','MarkerSize',20)
    plot(X1(end),Y1(end),'k.','MarkerSize',20)
    plot(X2(end),Y2(end),'k.','MarkerSize',20)
    plot(X3(end),Y3(end),'k.','MarkerSize',20)
    legend('M1 Path', 'M2 Path', 'M3 Path')
    axis(ax)   
    axis square
  end %plotthepath

  function plotstates(T,Z)
    subplot(3,1,1)
      hold all
      plot(T,Z(:,1))
      axis([0 t -Inf Inf])
      title('Link 1', 'Units', 'normalized', 'Position', [0 1], 'HorizontalAlignment', 'left')
    subplot(3,1,2)
      hold all
      plot(T,Z(:,2))
      axis([0 t -Inf Inf])
      ylabel('Angular Position (rad)')
      title('Link 2', 'Units', 'normalized', 'Position', [0 1], 'HorizontalAlignment', 'left')
    subplot(3,1,3)
      hold all
      plot(T,Z(:,3))
      axis([0 t -Inf Inf])
      xlabel('Time (s)')
      title('Link 3', 'Units', 'normalized', 'Position', [0 1], 'HorizontalAlignment', 'left')
  end

  function plotenergy(T,Z)
    theta1 = Z(:,1);
    theta2 = Z(:,2);
    theta3 = Z(:,3);
    omega1 = Z(:,4);
    omega2 = Z(:,5);
    omega3 = Z(:,6);

    %Position (of COM)
    X1 = .5*l1 * sin(theta1);
    Y1 =.5*l1 * cos(theta1);
    X2 = .5*l2 * sin(theta2) + l1 * sin(theta1);
    Y2 =.5*l2 * cos(theta2) + l1 * cos(theta1);
    X3 = .5*l3 * sin(theta3) + l2 * sin(theta2) + l1 * sin(theta1);
    Y3 =.5*l3 * cos(theta3) + l2 * cos(theta2) + l1 * cos(theta1);

    %Velocity
    X1d = .5*l1*omega1.*cos(theta1);
    Y1d =-.5*l1*omega1.*sin(theta1);
    X2d = .5*l2*omega2.*cos(theta2) + l1*omega1.*cos(theta1);
    Y2d =-.5*l2*omega2.*sin(theta2) - l1*omega1.*sin(theta1);
    X3d = .5*l3*omega3.*cos(theta3) + l2*omega2.*cos(theta2) + l1*omega1.*cos(theta1);
    Y3d =-.5*l3*omega3.*sin(theta3) - l2*omega2.*sin(theta2) - l1*omega1.*sin(theta1);
    
    %Potential Energy
    potential = g*(m1*Y1 + m2*Y2 + m3*Y3)

    %Kinetic Energy
    v1 = (X1d.^2 + Y1d.^2).^(1/2);
    v2 = (X2d.^2 + Y2d.^2).^(1/2);
    v3 = (X3d.^2 + Y3d.^2).^(1/2);
    t1 = .5 * m1 * v1.^2;
    t2 = .5 * m2 * v2.^2; 
    t3 = .5 * m3 * v3.^2; 
    r1 = .5 * I1 * omega1.^2;
    r2 = .5 * I2 * omega2.^2;
    r3 = .5 * I3 * omega3.^2;
    kinetic = t1 + t2 + t3 + r1 + r2 + r3;

    %Total Energy
    energy = potential + kinetic;

    hold all
    % plot(T,potential)
    % plot(T,kinetic)
    plot(T,energy)
    title('Energy')
    ylabel('Energy (J)')
    legend('Potential','Kinetic','Total')
    axis([0 t -Inf Inf])
    xlabel('Time (s)')
  end %plotenergy

end %pendulum